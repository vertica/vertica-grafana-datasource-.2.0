{"version":3,"file":"react-query-devtools.production.min.js","sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js"],"sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultColumn = {\n  Cell: ({ cell: { value = '' } }) => value,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    !!(() => {\n      let proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function'\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    isFunctionComponent(component) ||\n    isExoticComponent(component)\n  )\n}\n","import React from 'react'\nimport { defaultColumn } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\n// Find the depth of the columns\nexport function dedupeBy(arr, fn) {\n  return [...arr]\n    .reverse()\n    .filter((d, i, all) => all.findIndex(dd => fn(dd) === fn(d)) === i)\n    .reverse()\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    Footer: () => <>&nbsp;</>,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(allColumns, defaultColumn) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n  dedupeBy,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const coreDataModel = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return { rows, flatRows, rowsById }\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  // Allow materialized columns to also access data\n  const [rows, flatRows, rowsById, materializedColumns] = React.useMemo(() => {\n    const { rows, flatRows, rowsById } = coreDataModel\n    const materializedColumns = reduceHooks(\n      getHooks().materializedColumns,\n      [],\n      {\n        instance: getInstance(),\n      }\n    )\n\n    materializedColumns.forEach(d => assignColumnAccessor(d))\n\n    const materializedColumnsQueue = [...materializedColumns]\n\n    while (materializedColumnsQueue.length) {\n      const column = materializedColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById, materializedColumns]\n  }, [\n    coreDataModel,\n    getHooks,\n    getInstance,\n    data,\n    getRowId,\n    getSubRows,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    ...reduceHooks(getHooks().materializedColumnsDeps, [], {\n      instance: getInstance(),\n    }),\n  ])\n\n  Object.assign(getInstance(), {\n    rows,\n    flatRows,\n    rowsById,\n    materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Combine new materialized columns with all columns (dedupe prefers later columns)\n  allColumns = React.useMemo(\n    () => dedupeBy([...allColumns, ...materializedColumns], d => d.id),\n    [allColumns, materializedColumns]\n  )\n  getInstance().allColumns = allColumns\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns (dedupe prefers later columns)\n  allColumns = React.useMemo(\n    () => dedupeBy([...allColumns, ...visibleColumns], d => d.id),\n    [allColumns, visibleColumns]\n  )\n  getInstance().allColumns = allColumns\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const cell = {\n          column,\n          row,\n          value: row.values[column.id],\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows = filteredRows.map(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return row\n        }\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length > 0\n              ? filterRows(row.subRows, depth + 1)\n              : row.subRows,\n        }\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport { getFilterMethod, shouldAutoRemoveFilter } from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      return filterMethod(\n        filteredRows,\n        allColumns.map(d => d.id),\n        globalFilterValue\n      ).map(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length\n              ? filterRows(row.subRows)\n              : row.subRows,\n        }\n      })\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nexport function unique(values) {\n  return [...new Set(values).values()]\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  defaultGroupByFn,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregatedValue) {\n            const aggregateValueFn =\n              typeof column.aggregateValue === 'function'\n                ? column.aggregateValue\n                : userAggregations[column.aggregateValue] ||\n                  aggregations[column.aggregateValue]\n\n            if (!aggregateValueFn) {\n              console.info({ column })\n              throw new Error(\n                `React Table: Invalid column.aggregateValue option for column listed above`\n              )\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column)\n          }\n          return columnValue\n        })\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand\n  })\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  defaultOrderByFn,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    toggleSortBy,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state\n    }\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n    manualGlobalFilter,\n    manualFilters,\n    manualGroupBy,\n    manualSortBy,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    manualGlobalFilter ? null : globalFilter,\n    manualFilters ? null : filters,\n    manualGroupBy ? null : groupBy,\n    manualSortBy ? null : sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () => (pageCount > 0 ? [...new Array(pageCount)].map((d, i) => i) : []),\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage = pageCount === -1 || pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    if (selectAll) {\n      const selectedRowIds = {}\n\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n\n      return {\n        ...state,\n        selectedRowIds,\n      }\n    }\n\n    return {\n      ...state,\n      selectedRowIds: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = rowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    let newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && row.subRows) {\n        return row.subRows.forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n} from '../publicUtils'\n\nimport { getFirstDefined } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false,\n    })\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false,\n    })\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance({ plugins }) {\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableBodyProps.push(getTableBodyProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableBodyProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth ? `${column.totalFlexWidth} 0 auto` : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n"],"names":["actions","init","defaultColumn","Cell","cell","value","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","defaultOrderByFn","arr","funcs","dirs","sort","rowA","rowB","i","length","sortFn","desc","sortInt","index","defaultGroupByFn","rows","columnId","reduce","prev","row","resKey","values","Array","isArray","push","mergeProps","propList","props","next","style","className","makePropGetter","hooks","meta","userProps","handlePropGetter","prevProps","reduceHooks","initial","allowUndefined","nextValue","process","env","NODE_ENV","console","info","Error","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","pluginIndex","findIndex","plugin","before","beforeIndex","functionalUpdate","updater","old","useGetLatest","obj","ref","React","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","isFunctionComponent","$$typeof","includes","description","isExoticComponent","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","newArr","d","String","replace","join","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","dedupeBy","reverse","filter","all","dd","decorateColumn","userDefaultColumn","Footer","makeHeaderGroups","allColumns","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","isExpanded","original","canExpand","subRows","getFilterMethod","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","getInstance","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","undefined","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","filteredFlatRows","filteredRowsById","filterRows","filteredSoFar","preFilteredRows","filteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","Set","size","emptyArray","emptyObject","resetGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","setGroupBy","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","groupedValues","leafValues","columnValue","aggregatedValue","aggregateValueFn","aggregateValue","aggregateFn","aggregate","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","reSplitAlphaNumeric","compareBasic","b","getRowValueByColumnID","toString","isNaN","aa","shift","bb","an","parseInt","bn","combo","getTime","resetSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","newPageIndex","topRowIndex","floor","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","page","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","from","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","setSelected","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_oldRowState$cellStat","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","addEventListener","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","flex","totalColumnsMinWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","instanceRef","userColumns","getStateReducer","s","handler","useReducer","reducerState","coreDataModel","allColumnsQueue","materializedColumnsQueue","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"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"}