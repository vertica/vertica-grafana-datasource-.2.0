{"version":3,"file":"react-table.production.min.js","sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js"],"sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultColumn = {\n  Cell: ({ cell: { value = '' } }) => value,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    !!(() => {\n      let proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function'\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    isFunctionComponent(component) ||\n    isExoticComponent(component)\n  )\n}\n","import React from 'react'\nimport { defaultColumn } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    Footer: () => <>&nbsp;</>,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(allColumns, defaultColumn) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns (dedupe prefers later columns)\n  allColumns = React.useMemo(() => {\n    const columns = [...allColumns]\n\n    visibleColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const cell = {\n          column,\n          row,\n          value: row.values[column.id],\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nexport function unique(values) {\n  return [...new Set(values).values()]\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregatedValue) {\n            const aggregateValueFn =\n              typeof column.aggregateValue === 'function'\n                ? column.aggregateValue\n                : userAggregations[column.aggregateValue] ||\n                  aggregations[column.aggregateValue]\n\n            if (!aggregateValueFn) {\n              console.info({ column })\n              throw new Error(\n                `React Table: Invalid column.aggregateValue option for column listed above`\n              )\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column)\n          }\n          return columnValue\n        })\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state\n    }\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage = pageCount === -1 || pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = rowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && row.subRows) {\n        return row.subRows.forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n} from '../publicUtils'\n\nimport { getFirstDefined } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false,\n    })\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false,\n    })\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance({ plugins }) {\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n"],"names":["actions","init","defaultColumn","Cell","cell","value","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","nextValue","process","env","NODE_ENV","console","info","Error","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","pluginIndex","findIndex","plugin","before","beforeIndex","functionalUpdate","updater","old","useGetLatest","obj","ref","React","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","isFunctionComponent","$$typeof","includes","description","isExoticComponent","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","join","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","decorateColumn","userDefaultColumn","Footer","makeHeaderGroups","allColumns","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","undefined","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","Set","size","emptyArray","emptyObject","resetGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","setGroupBy","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","groupedValues","leafValues","columnValue","aggregatedValue","aggregateValueFn","aggregateValue","aggregateFn","aggregate","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","resKey","reSplitAlphaNumeric","compareBasic","b","getRowValueByColumnID","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","sort","getTime","resetSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","newPageIndex","topRowIndex","floor","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","page","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","from","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_oldRowState$cellStat","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","addEventListener","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","flex","totalColumnsMinWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","instanceRef","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","duplicateColumns","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"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"}