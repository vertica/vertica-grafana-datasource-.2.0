{"version":3,"sources":["../../src/eslint/getJSDocComment.js"],"names":["isCommentToken","token","type","getDecorator","sourceCode","value","nested","tokenBefore","getTokenBefore","includeComments","looksLikeExport","astNode","getTSFunctionComment","parent","grandparent","greatGrandparent","greatGreatGrandparent","getReducedASTNode","node","includes","getCommentsBefore","length","test","getJSDocComment","settings","findJSDocComment","minLines","maxLines","currentNode","decorator","charAt","loc","start","line","end","reducedNode"],"mappings":";;;;;;;AAAA;;;;;;AAMA;;;;;;AAMA,MAAMA,cAAc,GAAIC,KAAD,IAAW;AAChC,SAAOA,KAAK,CAACC,IAAN,KAAe,MAAf,IAAyBD,KAAK,CAACC,IAAN,KAAe,OAAxC,IAAmDD,KAAK,CAACC,IAAN,KAAe,SAAzE;AACD,CAFD;;AAIA,MAAMC,YAAY,GAAG,CAACF,KAAD,EAAQG,UAAR,KAAuB;AAC1C,MAAI,CAACH,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AACD,MAAIA,KAAK,CAACC,IAAN,KAAe,YAAf,IAA+BD,KAAK,CAACI,KAAN,KAAgB,GAAnD,EAAwD;AACtD,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,WAAW,GAAGN,KAAlB;;AACA,OAAG;AACDM,MAAAA,WAAW,GAAGH,UAAU,CAACI,cAAX,CAA0BD,WAA1B,EAAuC;AAACE,QAAAA,eAAe,EAAE;AAAlB,OAAvC,CAAd,CADC,CAED;;AACA,UAAIF,WAAW,IAAIA,WAAW,CAACL,IAAZ,KAAqB,YAAxC,EAAsD;AACpD,YAAIK,WAAW,CAACF,KAAZ,KAAsB,GAA1B,EAA+B;AAC7BC,UAAAA,MAAM;AACP;;AACD,YAAIC,WAAW,CAACF,KAAZ,KAAsB,GAA1B,EAA+B;AAC7B,cAAIC,MAAJ,EAAY;AACVA,YAAAA,MAAM;AACP,WAFD,MAEO;AACL;AACD;AACF;AACF;AACF,KAfD,QAeSC,WAfT;;AAiBA,WAAOA,WAAP;AACD;;AACD,MAAIN,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/B,UAAMK,WAAW,GAAGH,UAAU,CAACI,cAAX,CAA0BP,KAA1B,EAAiC;AAACQ,MAAAA,eAAe,EAAE;AAAlB,KAAjC,CAApB;;AACA,QAAIF,WAAW,IAAIA,WAAW,CAACL,IAAZ,KAAqB,YAApC,IAAoDK,WAAW,CAACF,KAAZ,KAAsB,GAA9E,EAAmF;AACjF,aAAOE,WAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CAlCD;AAoCA;;;;;;;;;;;AAOA,MAAMG,eAAe,GAAG,UAAUC,OAAV,EAAmB;AACzC,SAAOA,OAAO,CAACT,IAAR,KAAiB,0BAAjB,IAA+CS,OAAO,CAACT,IAAR,KAAiB,wBAAhE,IACLS,OAAO,CAACT,IAAR,KAAiB,sBADZ,IACsCS,OAAO,CAACT,IAAR,KAAiB,iBAD9D;AAED,CAHD;;AAKA,MAAMU,oBAAoB,GAAG,UAAUD,OAAV,EAAmB;AAC9C,QAAM;AAACE,IAAAA;AAAD,MAAWF,OAAjB;AACA,QAAMG,WAAW,GAAGD,MAAM,CAACA,MAA3B;AACA,QAAME,gBAAgB,GAAGD,WAAW,CAACD,MAArC;AACA,QAAMG,qBAAqB,GAAGD,gBAAgB,IAAIA,gBAAgB,CAACF,MAAnE,CAJ8C,CAM9C;;AACA,MAAIA,MAAM,CAACX,IAAP,KAAgB,kBAApB,EAAwC;AACtC,WAAOS,OAAP;AACD;;AAED,UAAQG,WAAW,CAACZ,IAApB;AACA,SAAK,eAAL;AACA,SAAK,mBAAL;AACA,SAAK,mBAAL;AACA,SAAK,qBAAL;AACE,aAAOY,WAAP;;AACF,SAAK,yBAAL;AACE;AACA,UACEC,gBAAgB,CAACb,IAAjB,KAA0B,oBAD5B,CAGA;AAHA,QAIE;AACA,iBAAOc,qBAAqB,CAACH,MAA7B;AACD,SARH,CAUE;;;AACA,aAAOF,OAAP;;AACF,SAAK,oBAAL;AACE;AACA,UAAII,gBAAgB,CAACb,IAAjB,KAA0B,kBAA9B,EAAkD;AAChD,eAAOa,gBAAP;AACD;;AAEH;;AACA;AACE;AACA,UAAID,WAAW,CAACZ,IAAZ,KAAqB,YAAzB,EAAuC;AACrC;AACA,eAAOS,OAAP;AACD;;AA9BH,GAX8C,CA4C9C;;;AACA,UAAQI,gBAAgB,CAACb,IAAzB;AACA,SAAK,yBAAL;AACE;AACA,UACEc,qBAAqB,CAACd,IAAtB,KAA+B,oBAA/B,IACAc,qBAAqB,CAACH,MAAtB,CAA6BX,IAA7B,KAAsC,qBAFxC,EAGE;AACA,eAAOc,qBAAqB,CAACH,MAA7B;AACD,OAPH,CASE;;;AACA,aAAOF,OAAP;;AACF,SAAK,qBAAL;AACE,aAAOI,gBAAP;;AACF,SAAK,oBAAL;AACE;AACA,UAAIC,qBAAqB,CAACd,IAAtB,KAA+B,qBAAnC,EAA0D;AACxD,eAAOc,qBAAP;AACD;;AAED;;AACF;AACE;AACA,aAAOL,OAAP;AAvBF;AAyBD,CAtED;AAwEA;;AACA;;;;;;;;;;AAQA,MAAMM,iBAAiB,GAAG,UAAUC,IAAV,EAAgBd,UAAhB,EAA4B;AACpD,MAAI;AAACS,IAAAA;AAAD,MAAWK,IAAf;;AAEA,UAAQA,IAAI,CAAChB,IAAb;AACA,SAAK,gBAAL;AACE,aAAOU,oBAAoB,CAACM,IAAD,CAA3B;;AACF,SAAK,wBAAL;AACA,SAAK,wBAAL;AACA,SAAK,mBAAL;AACA,SAAK,kBAAL;AACA,SAAK,qBAAL;AACE,aAAOR,eAAe,CAACG,MAAD,CAAf,GAA0BA,MAA1B,GAAmCK,IAA1C;;AAEF,SAAK,iBAAL;AACA,SAAK,kBAAL;AACA,SAAK,yBAAL;AACA,SAAK,+BAAL;AACA,SAAK,oBAAL;AACE,UACE,CAAC,CAAC,gBAAD,EAAmB,wBAAnB,EAA6C,eAA7C,EAA8DC,QAA9D,CAAuEN,MAAM,CAACX,IAA9E,CADH,EAEE;AACA,eACE,CAACE,UAAU,CAACgB,iBAAX,CAA6BP,MAA7B,EAAqCQ,MAAtC,IACA,CAAC,YAAYC,IAAZ,CAAiBT,MAAM,CAACX,IAAxB,CADD,IAEAW,MAAM,CAACX,IAAP,KAAgB,qBAFhB,IAGAW,MAAM,CAACX,IAAP,KAAgB,qBAHhB,IAIAW,MAAM,CAACX,IAAP,KAAgB,kBAJhB,IAKAW,MAAM,CAACX,IAAP,KAAgB,UANlB,EAOE;AACAW,UAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;;AAEA,cAAI,CAACA,MAAL,EAAa;AACX;AACD;AACF;;AACD,YAAIA,MAAM,IAAIA,MAAM,CAACX,IAAP,KAAgB,qBAA1B,IAAmDW,MAAM,CAACX,IAAP,KAAgB,SAAvE,EAAkF;AAChF,cAAIW,MAAM,CAACA,MAAP,IAAiBA,MAAM,CAACA,MAAP,CAAcX,IAAd,KAAuB,wBAA5C,EAAsE;AACpE,mBAAOW,MAAM,CAACA,MAAd;AACD;;AAED,iBAAOA,MAAP;AACD;AACF;;AAED,aAAOK,IAAP;;AAEF;AACE,aAAOA,IAAP;AA5CF;AA8CD,CAjDD;AAmDA;;;;;;;;;;;;;;;AAWA,MAAMK,eAAe,GAAG,UAAUnB,UAAV,EAAsBc,IAAtB,EAA4BM,QAA5B,EAAsC;AAC5D;;;;;;;;AAQA,QAAMC,gBAAgB,GAAId,OAAD,IAAa;AACpC,UAAM;AAACe,MAAAA,QAAD;AAAWC,MAAAA;AAAX,QAAuBH,QAA7B;AACA,QAAII,WAAW,GAAGjB,OAAlB;AACA,QAAIJ,WAAW,GAAG,IAAlB;;AAEA,WAAOqB,WAAP,EAAoB;AAClBrB,MAAAA,WAAW,GAAGH,UAAU,CAACI,cAAX,CAA0BoB,WAA1B,EAAuC;AAACnB,QAAAA,eAAe,EAAE;AAAlB,OAAvC,CAAd;AACA,YAAMoB,SAAS,GAAG1B,YAAY,CAACI,WAAD,EAAcH,UAAd,CAA9B;;AACA,UAAIyB,SAAJ,EAAe;AACbD,QAAAA,WAAW,GAAGC,SAAd;AACA;AACD;;AACD,UAAI,CAACtB,WAAD,IAAgB,CAACP,cAAc,CAACO,WAAD,CAAnC,EAAkD;AAChD,eAAO,IAAP;AACD;;AACD,UAAIA,WAAW,CAACL,IAAZ,KAAqB,MAAzB,EAAiC;AAC/B0B,QAAAA,WAAW,GAAGrB,WAAd;AACA;AACD;;AACD;AACD;;AAED,QACEA,WAAW,CAACL,IAAZ,KAAqB,OAArB,IACAK,WAAW,CAACF,KAAZ,CAAkByB,MAAlB,CAAyB,CAAzB,MAAgC,GADhC,IAEAF,WAAW,CAACG,GAAZ,CAAgBC,KAAhB,CAAsBC,IAAtB,GAA6B1B,WAAW,CAACwB,GAAZ,CAAgBG,GAAhB,CAAoBD,IAAjD,IAAyDP,QAFzD,IAGAE,WAAW,CAACG,GAAZ,CAAgBC,KAAhB,CAAsBC,IAAtB,GAA6B1B,WAAW,CAACwB,GAAZ,CAAgBG,GAAhB,CAAoBD,IAAjD,IAAyDN,QAJ3D,EAKE;AACA,aAAOpB,WAAP;AACD;;AAED,WAAO,IAAP;AACD,GAhCD;;AAkCA,QAAM4B,WAAW,GAAGlB,iBAAiB,CAACC,IAAD,EAAOd,UAAP,CAArC;AAEA,SAAOqB,gBAAgB,CAACU,WAAD,CAAvB;AACD,CA9CD;;;eAiDeZ,e","sourcesContent":["/**\n * Obtained originally from {@link https://github.com/eslint/eslint/blob/master/lib/util/source-code.js#L313}\n *\n * @license MIT\n */\n\n/**\n * Checks if the given token is a comment token or not.\n *\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a comment token.\n */\nconst isCommentToken = (token) => {\n  return token.type === 'Line' || token.type === 'Block' || token.type === 'Shebang';\n};\n\nconst getDecorator = (token, sourceCode) => {\n  if (!token) {\n    return false;\n  }\n  if (token.type === 'Punctuator' && token.value === ')') {\n    let nested = 0;\n    let tokenBefore = token;\n    do {\n      tokenBefore = sourceCode.getTokenBefore(tokenBefore, {includeComments: true});\n      // istanbul ignore if\n      if (tokenBefore && tokenBefore.type === 'Punctuator') {\n        if (tokenBefore.value === ')') {\n          nested++;\n        }\n        if (tokenBefore.value === '(') {\n          if (nested) {\n            nested--;\n          } else {\n            break;\n          }\n        }\n      }\n    } while (tokenBefore);\n\n    return tokenBefore;\n  }\n  if (token.type === 'Identifier') {\n    const tokenBefore = sourceCode.getTokenBefore(token, {includeComments: true});\n    if (tokenBefore && tokenBefore.type === 'Punctuator' && tokenBefore.value === '@') {\n      return tokenBefore;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Check to see if its a ES6 export declaration.\n *\n * @param {ASTNode} astNode An AST node.\n * @returns {boolean} whether the given node represents an export declaration.\n * @private\n */\nconst looksLikeExport = function (astNode) {\n  return astNode.type === 'ExportDefaultDeclaration' || astNode.type === 'ExportNamedDeclaration' ||\n    astNode.type === 'ExportAllDeclaration' || astNode.type === 'ExportSpecifier';\n};\n\nconst getTSFunctionComment = function (astNode) {\n  const {parent} = astNode;\n  const grandparent = parent.parent;\n  const greatGrandparent = grandparent.parent;\n  const greatGreatGrandparent = greatGrandparent && greatGrandparent.parent;\n\n  // istanbul ignore if\n  if (parent.type !== 'TSTypeAnnotation') {\n    return astNode;\n  }\n\n  switch (grandparent.type) {\n  case 'ClassProperty':\n  case 'TSDeclareFunction':\n  case 'TSMethodSignature':\n  case 'TSPropertySignature':\n    return grandparent;\n  case 'ArrowFunctionExpression':\n    // istanbul ignore else\n    if (\n      greatGrandparent.type === 'VariableDeclarator'\n\n    // && greatGreatGrandparent.parent.type === 'VariableDeclaration'\n    ) {\n      return greatGreatGrandparent.parent;\n    }\n\n    // istanbul ignore next\n    return astNode;\n  case 'FunctionExpression':\n    // istanbul ignore else\n    if (greatGrandparent.type === 'MethodDefinition') {\n      return greatGrandparent;\n    }\n\n  // Fallthrough\n  default:\n    // istanbul ignore if\n    if (grandparent.type !== 'Identifier') {\n      // istanbul ignore next\n      return astNode;\n    }\n  }\n\n  // istanbul ignore next\n  switch (greatGrandparent.type) {\n  case 'ArrowFunctionExpression':\n    // istanbul ignore else\n    if (\n      greatGreatGrandparent.type === 'VariableDeclarator' &&\n      greatGreatGrandparent.parent.type === 'VariableDeclaration'\n    ) {\n      return greatGreatGrandparent.parent;\n    }\n\n    // istanbul ignore next\n    return astNode;\n  case 'FunctionDeclaration':\n    return greatGrandparent;\n  case 'VariableDeclarator':\n    // istanbul ignore else\n    if (greatGreatGrandparent.type === 'VariableDeclaration') {\n      return greatGreatGrandparent;\n    }\n\n    // Fallthrough\n  default:\n    // istanbul ignore next\n    return astNode;\n  }\n};\n\n/* eslint-disable complexity */\n/**\n * Reduces the provided node to the appropriate node for evaluating JSDoc comment status.\n *\n * @param {ASTNode} node An AST node.\n * @param {SourceCode} sourceCode The ESLint SourceCode.\n * @returns {ASTNode} The AST node that can be evaluated for appropriate JSDoc comments.\n * @private\n */\nconst getReducedASTNode = function (node, sourceCode) {\n  let {parent} = node;\n\n  switch (node.type) {\n  case 'TSFunctionType':\n    return getTSFunctionComment(node);\n  case 'TSInterfaceDeclaration':\n  case 'TSTypeAliasDeclaration':\n  case 'TSEnumDeclaration':\n  case 'ClassDeclaration':\n  case 'FunctionDeclaration':\n    return looksLikeExport(parent) ? parent : node;\n\n  case 'ClassExpression':\n  case 'ObjectExpression':\n  case 'ArrowFunctionExpression':\n  case 'TSEmptyBodyFunctionExpression':\n  case 'FunctionExpression':\n    if (\n      !['CallExpression', 'OptionalCallExpression', 'NewExpression'].includes(parent.type)\n    ) {\n      while (\n        !sourceCode.getCommentsBefore(parent).length &&\n        !/Function/u.test(parent.type) &&\n        parent.type !== 'VariableDeclaration' &&\n        parent.type !== 'ExpressionStatement' &&\n        parent.type !== 'MethodDefinition' &&\n        parent.type !== 'Property'\n      ) {\n        parent = parent.parent;\n\n        if (!parent) {\n          break;\n        }\n      }\n      if (parent && parent.type !== 'FunctionDeclaration' && parent.type !== 'Program') {\n        if (parent.parent && parent.parent.type === 'ExportNamedDeclaration') {\n          return parent.parent;\n        }\n\n        return parent;\n      }\n    }\n\n    return node;\n\n  default:\n    return node;\n  }\n};\n\n/**\n * Retrieves the JSDoc comment for a given node.\n *\n * @param {SourceCode} sourceCode The ESLint SourceCode\n * @param {ASTNode} node The AST node to get the comment for.\n * @param {object} settings The settings in context\n * @returns {Token|null} The Block comment token containing the JSDoc comment\n *    for the given node or null if not found.\n * @public\n * @deprecated\n */\nconst getJSDocComment = function (sourceCode, node, settings) {\n  /**\n   * Checks for the presence of a JSDoc comment for the given node and returns it.\n   *\n   * @param {ASTNode} astNode The AST node to get the comment for.\n   * @returns {Token|null} The Block comment token containing the JSDoc comment\n   *    for the given node or null if not found.\n   * @private\n   */\n  const findJSDocComment = (astNode) => {\n    const {minLines, maxLines} = settings;\n    let currentNode = astNode;\n    let tokenBefore = null;\n\n    while (currentNode) {\n      tokenBefore = sourceCode.getTokenBefore(currentNode, {includeComments: true});\n      const decorator = getDecorator(tokenBefore, sourceCode);\n      if (decorator) {\n        currentNode = decorator;\n        continue;\n      }\n      if (!tokenBefore || !isCommentToken(tokenBefore)) {\n        return null;\n      }\n      if (tokenBefore.type === 'Line') {\n        currentNode = tokenBefore;\n        continue;\n      }\n      break;\n    }\n\n    if (\n      tokenBefore.type === 'Block' &&\n      tokenBefore.value.charAt(0) === '*' &&\n      currentNode.loc.start.line - tokenBefore.loc.end.line >= minLines &&\n      currentNode.loc.start.line - tokenBefore.loc.end.line <= maxLines\n    ) {\n      return tokenBefore;\n    }\n\n    return null;\n  };\n\n  const reducedNode = getReducedASTNode(node, sourceCode);\n\n  return findJSDocComment(reducedNode);\n};\n\nexport {getReducedASTNode, getJSDocComment, getDecorator};\nexport default getJSDocComment;\n"],"file":"getJSDocComment.js"}